# KPIs para Dashboard de An√°lise de Fluxo (Vers√£o Refinada)

Esta √© uma vers√£o refinada dos KPIs, baseada em uma an√°lise granular da estrutura JSON. O foco muda de simples contagens para m√©tricas de **qualidade, sa√∫de, complexidade, manutenibilidade e experi√™ncia do usu√°rio (UX)**.

---

## Funcionalidade Essencial: Vis√£o 360¬∫ do Bloco

Para permitir uma an√°lise granular e depura√ß√£o eficiente, o dashboard deve incluir uma se√ß√£o de "Explorador de Estados". Esta funcionalidade permitir√° ao usu√°rio selecionar qualquer bloco (estado) pelo seu ID e visualizar um resumo completo e organizado de tudo o que acontece dentro dele.

**A vis√£o deve detalhar os seguintes componentes:**

### 1. A√ß√µes de Entrada (Entering Actions)
- **O que √©:** Lista todas as a√ß√µes customizadas executadas **quando se entra** no bloco.
- **Como visualizar:** Para cada a√ß√£o, exibir seu **T√≠tulo (`$title`)**, **Tipo (`type`)** e um expansor para ver o JSON completo com todos os detalhes.

### 2. A√ß√µes de Conte√∫do (Content Actions)
- **O que √©:** Lista todas as mensagens, perguntas e inputs que s√£o apresentados ao usu√°rio a partir deste bloco.
- **Como visualizar:** Para cada a√ß√£o, exibir seu **T√≠tulo**, **Tipo (`SendMessage`, `Input`)** e detalhes importantes (e.g., vari√°vel onde o input √© salvo). Incluir um expansor para o JSON completo.

### 3. A√ß√µes de Sa√≠da (Leaving Actions)
- **O que √©:** Lista todas as a√ß√µes customizadas executadas **quando se sai** do bloco, antes de transicionar para o pr√≥ximo.
- **Como visualizar:** Estrutura id√™ntica √† das A√ß√µes de Entrada, mostrando **T√≠tulo**, **Tipo** e detalhes no JSON.

### 4. Condi√ß√µes de Sa√≠da (Outputs)
- **O que √©:** Mostra todas as regras de neg√≥cio que determinam o pr√≥ximo passo no fluxo.
- **Como visualizar:** Para cada sa√≠da poss√≠vel, mostrar:
    - O **Bloco de Destino** (`stateId`).
    - As regras em formato leg√≠vel: `SE [fonte].[vari√°vel] [compara√ß√£o] [valores]`.
    - Exemplo: `SE context.isWorkTime equals [true]`.

### 5. Sa√≠da Padr√£o (Default Output)
- **O que √©:** O caminho de fallback caso nenhuma das condi√ß√µes de sa√≠da seja atendida.
- **Como visualizar:** Indicar claramente qual √© o **Bloco de Destino** padr√£o.

---

## üéØ KPIs Globais e Estrat√©gicos

KPIs que medem a arquitetura e a estrat√©gia geral do fluxo.

1.  **√çndice de Sa√∫de do Fluxo (Flow Health Score):**
    - **M√©trica:** `1 - (Componentes Inv√°lidos / Total de Componentes)`. Um √∫nico score de 0 a 1.
    - **Por que √© importante?** Fornece uma vis√£o instant√¢nea e de alto n√≠vel da estabilidade t√©cnica do fluxo. Ideal para acompanhamento cont√≠nuo.

2.  **√çndice de Complexidade do Fluxo (Flow Complexity Index):
    - **M√©trica:** Uma pontua√ß√£o ponderada: `(Contagem de Estados * 0.4) + (M√©dia de Condi√ß√µes por Estado * 0.3) + (Taxa de A√ß√µes Customizadas * 0.3)`.
    - **Por que √© importante?** Mede qu√£o dif√≠cil √© entender e manter o fluxo. Um n√∫mero alto sugere a necessidade de refatora√ß√£o ou modulariza√ß√£o.

3.  **√çndice de Depend√™ncia Externa (External Dependency Index):
    - **M√©trica:** Percentual de estados que cont√™m a√ß√µes `ProcessHttp` ou `ExecuteScript`.
    - **Por que √© importante?** Quantifica o qu√£o acoplado o bot est√° a sistemas externos, o que √© um indicador de risco (se os sistemas falharem) e de poder (se as integra√ß√µes forem ricas).

4.  **N√≠vel de Ramifica√ß√£o (Branching Factor):
    - **M√©trica:** M√©dia de sa√≠das (`conditionOutputs`) por estado. 
    - **Por que √© importante?** Um valor alto indica l√≥gica de decis√£o complexa, que pode ser dif√≠cil de testar e depurar.

5.  **√çndice de Manutenibilidade (Maintainability Score):
    - **M√©trica:** Percentual de a√ß√µes customizadas (`$id`) que possuem um `$title` descritivo e percentual de estados que possuem `tags` associadas.
    - **Por que √© importante?** Mede o qu√£o f√°cil √© para um novo desenvolvedor entender o que cada parte do fluxo faz sem precisar ler todo o c√≥digo/JSON.

6.  **Coes√£o do Fluxo (Flow Cohesion):
    - **M√©trica:** An√°lise de cluster (usando `position.json`) para identificar grupos de estados fortemente conectados entre si, mas fracamente conectados a outros grupos. O KPI √© o n√∫mero de clusters identificados.
    - **Por que √© importante?** Ajuda a identificar "sub-fluxos" que poderiam ser extra√≠dos em m√≥dulos separados, melhorando a organiza√ß√£o.

7.  **Taxa de Conte√∫do Din√¢mico (Dynamic Content Rate):
    - **M√©trica:** Percentual de a√ß√µes `SendMessage` cujo `content` ou `rawContent` cont√©m vari√°veis (`{{...}}`).
    - **Por que √© importante?** Mede o n√≠vel de personaliza√ß√£o das intera√ß√µes do bot. Um valor baixo pode indicar um bot muito est√°tico.

8.  **Potencial de "C√≥digo Morto" (Dead Code Potential):
    - **M√©trica:** Contagem de estados que n√£o s√£o alcan√ß√°veis a partir de nenhum estado raiz (`is_root`). Requer an√°lise de grafo.
    - **Por que √© importante?** Identifica l√≥gica in√∫til que polui o fluxo e aumenta a complexidade sem agregar valor.

---

## ‚öôÔ∏è KPIs por Tipo de A√ß√£o (Foco em Qualidade)

### 1. A√ß√£o: `ProcessHttp` (Chamadas de API)

1.  **Sa√∫de da Integra√ß√£o (Integration Health):** % de a√ß√µes `ProcessHttp` que salvam o status da resposta (`responseStatusVariable`) E possuem l√≥gica condicional subsequente para tratar c√≥digos de erro (e.g., 4xx, 5xx).
2.  **Diversidade de Endpoints:** Contagem de `settings.uri` √∫nicos. Ajuda a entender se o bot depende de um monolito ou de microsservi√ßos.
3.  **Seguran√ßa da Requisi√ß√£o:** % de chamadas que utilizam um header de `Authorization`.
4.  **Taxa de Reutiliza√ß√£o de API:** M√©dia de vezes que cada `settings.uri` √∫nico √© chamado. APIs muito reutilizadas s√£o cr√≠ticas.
5.  **Risco de Performance:** Contagem de chamadas `ProcessHttp` que **n√£o** s√£o seguidas por uma a√ß√£o ass√≠ncrona (e.g., `chatstate`), indicando que o usu√°rio pode ficar esperando.

### 2. A√ß√£o: `ExecuteScript` (Scripts Customizados)

1.  **Risco do Script (Script Risk Score):** Pontua√ß√£o baseada na complexidade (linhas de c√≥digo em `settings.source`), aus√™ncia de `inputVariables` (sugere efeitos colaterais) e aus√™ncia de `outputVariable` (sugere que o script faz algo "escondido").
2.  **Taxa de C√≥digo Morto em Scripts:** % de scripts cujo `outputVariable` √© definido mas nunca utilizado em a√ß√µes ou condi√ß√µes futuras.
3.  **Taxa de Acoplamento de Scripts:** % de scripts que dependem de mais de N `inputVariables`. Scripts muito acoplados s√£o dif√≠ceis de reutilizar.
4.  **Taxa de C√≥digo Duplicado:** % de a√ß√µes `ExecuteScript` cujo `settings.source` √© id√™ntico ou tem alta similaridade com outro.
5.  **Padr√£o de Nomenclatura:** Consist√™ncia na nomenclatura de `inputVariables` e `outputVariable` (e.g., camelCase, prefixos `in_`/`out_`).

### 3. A√ß√µes de Intera√ß√£o: `SendMessage` e `Input`

1.  **√çndice de Riqueza da Intera√ß√£o (Interaction Richness Score):** Pontua√ß√£o que aumenta com o uso de conte√∫do interativo (`application/vnd.lime.select+json`), `inputSuggestions`, e `$cardContent` complexo.
2.  **Robustez do Input do Usu√°rio:** % de blocos de `input` que possuem uma regra de `validation` definida. Mede a qualidade do tratamento de entradas do usu√°rio.
3.  **Clareza da Navega√ß√£o:** Para menus (`select+json`), a m√©dia de op√ß√µes oferecidas. Muitas op√ß√µes podem confundir; poucas podem limitar.
4.  **Taxa de "Becos sem Sa√≠da":** % de estados de `input` que n√£o t√™m uma sa√≠da padr√£o (`defaultOutput`) para tratar respostas inesperadas do usu√°rio.
5.  **Consist√™ncia da Experi√™ncia:** Varia√ß√£o no n√∫mero e tipo de `inputSuggestions` oferecidas ao longo do fluxo. Uma experi√™ncia consistente √© prefer√≠vel.

### 4. A√ß√µes de Gerenciamento de Estado: `SetVariable` e Condi√ß√µes

1.  **Taxa de Vari√°veis √ìrf√£s (Orphan Variable Rate):** % de vari√°veis definidas com `SetVariable` que nunca s√£o lidas (usadas em `conditions`, `SendMessage` ou `ProcessHttp`). Indica desperd√≠cio e l√≥gica morta.
2.  **Ciclo de Vida da Vari√°vel (Variable Lifecycle):** Dist√¢ncia m√©dia (em n¬∫ de estados) entre a defini√ß√£o (`SetVariable`) e o √∫ltimo uso de uma vari√°vel. Vari√°veis de vida longa aumentam a complexidade.
3.  **Complexidade da Condi√ß√£o:** M√©dia de sub-condi√ß√µes (`conditions` array) por bloco de sa√≠da. Sa√≠das com muitas sub-condi√ß√µes s√£o complexas.
4.  **Fonte da Verdade (Source of Truth):** Distribui√ß√£o da `source` nas condi√ß√µes (`input` vs. `context`). Mostra se o fluxo √© mais reativo √† entrada do usu√°rio ou ao estado interno.
5.  **Taxa de Vari√°veis "M√°gicas":** % de vari√°veis lidas no `context` que n√£o foram previamente definidas por um `SetVariable`, `ExecuteScript` ou `ProcessHttp`. Indica depend√™ncia de um contexto externo e n√£o gerenciado pelo fluxo.
